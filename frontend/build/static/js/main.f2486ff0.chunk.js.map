{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","question","setQuestion","useState","response","setResponse","loading","setLoading","React","createElement","style","padding","onSubmit","async","e","preventDefault","res","fetch","method","headers","Content-Type","body","JSON","stringify","prompt","ok","data","json","error","console","value","onChange","target","rows","placeholder","width","fontSize","type","disabled","marginTop","backgroundColor","border","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAkEeA,MAhEf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAUC,GAAeF,mBAAS,KAClCG,EAASC,GAAcJ,oBAAS,GAgCvC,OACEK,IAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACrBH,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,QAAMG,SAjCWC,UACnBC,EAAEC,iBACFR,GAAW,GACXF,EAAY,IAEZ,IACE,MAAMW,QAAYC,MAAM,iCAAkC,CACxDC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,OAAQvB,MAGjC,GAAGe,EAAIS,GACP,CACE,MAAMC,QAAaV,EAAIW,OACvBtB,EAAYqB,EAAKtB,eAIjBC,EAAY,6CAEd,MAAOuB,GACPC,QAAQD,MAAM,SAAUA,GACxBvB,EAAY,wCAEdE,GAAW,KAOPC,IAAAC,cAAA,YACEqB,MAAO7B,EACP8B,SAAWjB,GAAMZ,EAAYY,EAAEkB,OAAOF,OACtCG,KAAM,EACNC,YAAY,8BACZxB,MAAO,CAAEyB,MAAO,OAAQxB,QAAS,OAAQyB,SAAU,UAErD5B,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQ4B,KAAK,SACLC,SAAUhC,EACVI,MAAO,CAAE6B,UAAW,OAAQ5B,QAAS,YAAayB,SAAU,SAEjE9B,EAAU,gBAAkB,WAGhCF,GACCI,IAAAC,cAAA,OAAKC,MAAO,CAAE6B,UAAW,OAAQC,gBAAiB,UAAW7B,QAAS,OAAQ8B,OAAQ,mBACpFjC,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,SAAIL,MC/CCsC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA/B,EAAA,GAAAgC,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlD,IAAAC,cAACD,IAAMmD,WAAU,KACfnD,IAAAC,cAACT,EAAG,QAOR0C","file":"static/js/main.f2486ff0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [question, setQuestion] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setResponse(''); // clear previous response\n\n    try {\n      const res = await fetch('http://localhost:8000/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ prompt: question })\n      });\n\n      if(res.ok)\n      {\n        const data = await res.json();\n        setResponse(data.response);\n      }\n      else\n      {\n        setResponse('Failed to fetch response from the server.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setResponse('An error occurred. Please try again.');\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Ask a Question</h1>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          rows={4}\n          placeholder=\"Enter your question here...\"\n          style={{ width: '100%', padding: '10px', fontSize: '16px' }}\n        />\n        <br />\n        <button type=\"submit\" \n                disabled={loading} \n                style={{ marginTop: '10px', padding: '10px 20px', fontSize: '16px' }}\n        >\n          {loading ? 'Submitting...' : 'Submit'}\n        </button>\n      </form>\n      {response && (\n        <div style={{ marginTop: '20px', backgroundColor: '#f9f9f9', padding: '15px', border: '1px solid #ccc' }}>\n          <h2>Response:</h2>\n          <p>{response}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}