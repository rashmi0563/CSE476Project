{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","messages","setMessages","useState","question","setQuestion","loading","setLoading","React","createElement","className","map","msg","index","key","type","text","onSubmit","async","e","preventDefault","trim","newMessages","res","fetch","method","headers","Content-Type","body","JSON","stringify","prompt","ok","data","json","response","error","console","value","onChange","target","rows","placeholder","disabled","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LA4DeA,MAzDf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAUC,GAAeF,mBAAS,KAClCG,EAASC,GAAcJ,oBAAS,GAiCvC,OACEK,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,eACZT,EAASU,IAAI,CAACC,EAAKC,IAClBL,IAAAC,cAAA,OAAKK,IAAKD,EAAOH,qBAAsBE,EAAIG,QAASH,EAAII,QAG5DR,IAAAC,cAAA,QAAMC,UAAU,aAAaO,SAtCZC,UAEnB,GADAC,EAAEC,kBACGhB,EAASiB,OAAQ,OAEtB,MAAMC,EAAc,IAAIrB,EAAU,CAAEc,KAAM,OAAQC,KAAMZ,IACxDF,EAAYoB,GACZjB,EAAY,IACZE,GAAW,GAEX,IACE,MAAMgB,QAAYC,MAAM,iCAAkC,CACxDC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,OAAQ3B,MAGjC,GAAImB,EAAIS,GAAI,CACV,MAAMC,QAAaV,EAAIW,OACvBhC,EAAY,IAAIoB,EAAa,CAAEP,KAAM,MAAOC,KAAMiB,EAAKE,iBAEvDjC,EAAY,IAAIoB,EAAa,CAAEP,KAAM,MAAOC,KAAM,+CAEpD,MAAOoB,GACPC,QAAQD,MAAM,SAAUA,GACxBlC,EAAY,IAAIoB,EAAa,CAAEP,KAAM,MAAOC,KAAM,0CAEpDT,GAAW,KAWPC,IAAAC,cAAA,YACE6B,MAAOlC,EACPmC,SAAWpB,GAAMd,EAAYc,EAAEqB,OAAOF,OACtCG,KAAM,EACNC,YAAY,uBACZC,SAAUrC,IAEZE,IAAAC,cAAA,UAAQM,KAAK,SAAS4B,SAAUrC,GAAUA,EAAU,aAAe,WC1C5DsC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA5B,EAAA,GAAA6B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpD,IAAAC,cAACD,IAAMqD,WAAU,KACfrD,IAAAC,cAACT,EAAG,QAOR4C","file":"static/js/main.c0f9fc5a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [question, setQuestion] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!question.trim()) return;\n\n    const newMessages = [...messages, { type: 'user', text: question }];\n    setMessages(newMessages);\n    setQuestion('');\n    setLoading(true);\n\n    try {\n      const res = await fetch('http://localhost:8000/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ prompt: question })\n      });\n\n      if (res.ok) {\n        const data = await res.json();\n        setMessages([...newMessages, { type: 'bot', text: data.response }]);\n      } else {\n        setMessages([...newMessages, { type: 'bot', text: 'Failed to fetch response from the server.' }]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages([...newMessages, { type: 'bot', text: 'An error occurred. Please try again.' }]);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-window\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.type}`}>{msg.text}</div>\n        ))}\n      </div>\n      <form className=\"chat-input\" onSubmit={handleSubmit}>\n        <textarea\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          rows={2}\n          placeholder=\"Type your message...\"\n          disabled={loading}\n        />\n        <button type=\"submit\" disabled={loading}>{loading ? 'Sending...' : 'Send'}</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}